#!/bin/bash

current_dir="$(dirname "$0")"

# Source configurations variables
for f in "$current_dir"/configs/.configs* ; do
    # shellcheck disable=SC1090
    source "$f"
done

instance() {
	bash -eo pipefail "$current_dir"/scripts/instance.sh "$@"
}

devstack() {
	bash -eo pipefail "$current_dir"/scripts/devstack.sh "$@"
}

workflow() {
	bash -eo pipefail "$current_dir"/scripts/workflow.sh "$@"
}

image() {
	bash -eo pipefail "$current_dir"/scripts/image.sh "$@"
}

firewall() {
	bash -eo pipefail "$current_dir"/scripts/firewall.sh "$@"
}

local() {
	bash -eo pipefail "$current_dir"/scripts/local.sh "$@"
}

config() {
	bash -eo pipefail "$current_dir"/scripts/configurations.sh "$@"
}

version() {
  printf "Sultan ${CYAN}v%s${NORMAL}\n" "$VERSION"
}

help() {
  # shellcheck disable=SC2059
  printf "Sultan ${CYAN}v%s${NORMAL}\n" "$VERSION
${NORMAL}An Open edX Remote Devstack Toolkit by Appsembler

Usage:
  sultan <options>
  sultan (<service> <command> [argument(s)] [--option <argument>] | [option])

OPTIONS:
  -h, --help        Print command help
  -v, --version     Get current version

SERVICES:
  config    Manages Sultan configurations.
  devstack  Manages the devstack on your remote machine.
  instance  Manages all of your GCP instance aspects.
  workflow  Helps you suspending and resuming working on your instance.
  image     Manages GCP images creation and deletion on GCP. All images you
            create are being created from your machine.
  local     Takes care of configuring your local machine to be able communicate
            with the remote one.
  firewall  Manages the firewall configurations on GCP. Firewall rules are
            created in a sole purpose of restricting access to your instance
            to your machine only. This behavior might block your machine from
            reaching your instance if your IP changes, that could easily
            happen if your disconnect from and connect to the internet back.
            To solve this issue, clean rule comes handy.
" | less
}

if [ "$1" == '-v' ] || [ "$1" == '--version' ]; then
  version
  exit 0
fi

if [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
  help
  exit 0
fi

# Print help message if command is not found
if ! type -t "$1" | grep -i function > /dev/null; then
  help
  exit 1
fi

"$@"
